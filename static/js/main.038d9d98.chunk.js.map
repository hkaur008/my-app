{"version":3,"sources":["components/player.js","App.js","serviceWorker.js","index.js"],"names":["Player","e","preventDefault","this","props","player","target","value","className","onSubmit","handleForm","type","name","Component","App","state","board","Array","fill","winner","winLines","index","length","a","b","c","alert","setState","newboard","newplayer","checkWinner","console","log","Box","map","box","key","onClick","handleClick","setPlayer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RA2BeA,G,+LAvBJC,GACVA,EAAEC,iBACHC,KAAKC,MAAMC,OAAOJ,EAAEK,OAAOD,OAAOE,S,+BAIzB,IAAD,OAAE,OAAQ,yBAAKC,UAAU,aAC5B,0BAAMC,SAAU,SAACR,GAAD,OAAO,EAAKS,WAAWT,KAAvC,gBAGA,6BAHA,KAIA,+BAAO,2BAAOU,KAAK,QAAQC,KAAK,SAASJ,UAAU,SAASD,MAAM,OAJlE,MAMI,+BAAO,2BAAOI,KAAK,QAAQC,KAAK,SAASJ,UAAU,SAASD,MAAM,OACrE,2BAAOI,KAAK,SAASJ,MAAM,UAC5B,mC,GAhBgBM,cCkENC,E,YAhEf,WAAYV,GACX,IAAD,8BAAC,4CAAMA,KACAW,MAAO,CACVC,MAAQC,MAAM,GAAGC,KAAK,MACxBb,OAAO,KACTc,OAAO,MAJP,E,2EAkBE,IAVA,IAAIC,EACJ,CAAC,CAAE,IAAI,IAAI,KACX,CAAE,IAAI,IAAI,KACV,CAAE,IAAI,IAAI,KACV,CAAE,IAAI,IAAI,KACV,CAAE,IAAI,IAAI,KACV,CAAE,IAAI,IAAI,KACV,CAAE,IAAI,IAAI,KACV,CAAE,IAAI,IAAI,MAEFC,EAAM,EAAEA,EAAMD,EAASE,OAAOD,IACtC,CAAC,IAAD,cAAeD,EAASC,GAAxB,GAAQE,EAAR,KAAUC,EAAV,KAAYC,EAAZ,KACGtB,KAAKY,MAAMC,MAAMO,IAAKpB,KAAKY,MAAMC,MAAMO,KAAKpB,KAAKY,MAAMC,MAAMQ,IAAIrB,KAAKY,MAAMC,MAAMQ,KAAKrB,KAAKY,MAAMC,MAAMS,KAE3GC,MAAM,WAAWvB,KAAKwB,SACxB,CAACR,OAAOhB,KAAKY,MAAMV,a,kCAKPgB,GAEV,GAAGlB,KAAKY,MAAMV,SAAUF,KAAKY,MAAMI,OACnC,CAAC,IAAIS,EAASzB,KAAKY,MAAMC,MACzB,GAA6B,OAA1Bb,KAAKY,MAAMC,MAAMK,KAAiBlB,KAAKY,MAAMI,OAClD,CAAGS,EAASP,GAAOlB,KAAKY,MAAMV,OAC5B,IAAIwB,EAA8B,MAApB1B,KAAKY,MAAMV,OAAc,IAAI,IAC3CF,KAAKwB,SAAS,CAACX,MAAMY,EACrBvB,OAAOwB,IAET1B,KAAK2B,cAGLC,QAAQC,IAAIX,M,gCACFhB,GACV0B,QAAQC,IAAI3B,GACZF,KAAKwB,SAAS,CAACtB,OAAOA,M,+BAEb,IAAD,OACA4B,EAAI9B,KAAKY,MAAMC,MAAMkB,KAAI,SAACC,EAAKd,GAAN,OAAgB,yBAAKb,UAAU,MAAM4B,IAAKf,EACzEgB,QAAS,kBAAK,EAAKC,YAAYjB,KAASc,MACxC,OACF,yBAAK3B,UAAU,aACV,2CAEA,kBAAC,EAAD,CAAQH,OAAQ,SAACJ,GAAD,OAAM,EAAKsC,UAAUtC,MACrC,6BACA,yBAAKO,UAAU,SACbyB,Q,GA1DWpB,aCQE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.038d9d98.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './player.css';\r\n\r\nclass Player extends Component {\r\nhandleForm(e)\r\n{e.preventDefault();\r\nthis.props.player(e.target.player.value)\r\n}\r\n\r\n\r\nrender(){ return (<div className=\"container\">\r\n     <form onSubmit={(e) => this.handleForm(e)}>\r\n         \r\n     CHOOSE PLAYER\r\n     <br/>O:\r\n     <label><input type=\"radio\" name=\"player\" className=\"option\" value=\"0\"></input></label>\r\n\r\n      X: <label><input type=\"radio\" name=\"player\" className=\"option\" value=\"X\"></input></label>\r\n      <input type=\"submit\" value=\"start\"></input>\r\n     <hr/>\r\n     \r\n     </form>\r\n    </div> \r\n\r\n  );}\r\n}\r\n\r\nexport default Player;","import React, { Component } from 'react';\n\nimport './App.css';\nimport Player from './components/player.js';\nclass App extends Component {\nconstructor(props)\n{super(props)\n  this.state ={\n    board : Array(9).fill(null),\n  player:null,\nwinner:null\n}\n}\ncheckWinner(){\n  let winLines=\n  [[ \"0\",\"1\",\"2\"],\n  [ \"3\",\"4\",\"5\"],\n  [ \"6\",\"7\",\"8\"],\n  [ \"0\",\"3\",\"6\"],\n  [ \"1\",\"4\",\"7\"],\n  [ \"2\",\"5\",\"8\"],\n  [ \"0\",\"4\",\"8\"],\n  [ \"2\",\"4\",\"6\"]]\n\n  for(let index=0;index<winLines.length;index++)\n  { const[a,b,c]=winLines[index];\n  if(this.state.board[a]&& this.state.board[a]===this.state.board[b]&&this.state.board[b]===this.state.board[c])\n{ \n  alert('you won');this.setState(\n{winner:this.state.player})\n}\n\n}\n}\nhandleClick(index)\n{\n  if(this.state.player&& !this.state.winner)\n  {let newboard=this.state.board\n  if(this.state.board[index]===null&& !this.state.winner)\n{  newboard[index]=this.state.player\n  let newplayer=this.state.player===\"X\"? \"O\":\"X\"\n  this.setState({board:newboard,\n  player:newplayer\n  })\nthis.checkWinner()\n}\n\nconsole.log(index)}}\nsetPlayer(player){\nconsole.log(player);\nthis.setState({player:player})\n}\nrender(){\n  const Box=this.state.board.map((box, index) => <div className=\"box\" key={index} \n  onClick={() =>this.handleClick(index)}>{box}</div> )\n  return (\n<div className=\"container\">\n     <h1>tic toe tac\n     </h1>\n     <Player player={(e) =>this.setPlayer(e)} />\n     <br/>\n     <div className=\"board\">\n      {Box}\n    </div>\n    </div> \n\n  );}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}